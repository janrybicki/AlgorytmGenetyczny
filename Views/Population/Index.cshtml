@model PopulationModel

@{
    ViewData["Title"] = "Index";
    int i = 0;
}

<h1>Index</h1>

<form asp-action="Create">
    <div class="form-group">
        <label asp-for="RangeBeginning" class="control-label"></label>
        <input asp-for="RangeBeginning" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="RangeEnd" class="control-label"></label>
        <input asp-for="RangeEnd" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="Precision" class="control-label"></label>
        <input asp-for="Precision" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="Number" class="control-label"></label>
        <input asp-for="Number" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="CrossingProbability" class="control-label"></label>
        <input asp-for="CrossingProbability" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="MutationProbability" class="control-label"></label>
        <input asp-for="MutationProbability" class="form-control" />
    </div>

    <div class="form-group">
        <input type="submit" value="Wprowadź" class="btn btn-primary" />
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>Lp</th>
            <th>
                @Html.DisplayNameFor(model => model.Individuals[0].XReal1)
            </th>
            @*<th>
                @Html.DisplayNameFor(model => model.Individuals[0].XInt1)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Individuals[0].XBin)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Individuals[0].XInt2)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Individuals[0].XReal2)
            </th>*@
            <th>
                @Html.DisplayNameFor(model => model.Individuals[0].FunctionValue)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Individuals[0].TranslatedFunctionValue)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Individuals[0].SurviveProbability)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Individuals[0].SurviveDistributionFunction)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Individuals[0].R)
            </th>
            <th>
                XReal
            </th>
            <th>
                xBin
            </th>
            <th>
                xBin - Rodzice
            </th>
            <th>
                Pc
            </th>
            <th>
                Populacja dzieci
            </th>
            <th>
                Populacja po krzyżowaniu
            </th>
            <th>
                Mutowane bity
            </th>
            <th>
                xBin po mutacji
            </th>
            <th>xReal po mutacji</th>
            <th>f(x) po mutacji</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Individuals)
        {
            <tr>
                <td>@(++i)</td>
                <td>
                    @Html.DisplayFor(modelItem => item.XReal1)
                </td>
                @*<td>
                    @Html.DisplayFor(modelItem => item.XInt1)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.XBin)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.XInt2)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.XReal2)
                </td>*@
                <td>
                    @Html.DisplayFor(modelItem => item.FunctionValue)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TranslatedFunctionValue)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SurviveProbability)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SurviveDistributionFunction)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.R)
                </td>
                <td>
                    @if (item.IsSurvivor)
                    {
                        @Html.DisplayFor(modelItem => item.XReal1)
                    }
                </td>
                <td>
                    @if (item.IsSurvivor)
                    {
                        @Html.DisplayFor(modelItem => item.XBin)
                    }
                </td>
                <td>
                    @if (item.IsParent)
                    {
                        @Html.DisplayFor(modelItem => item.XBin)
                    }
                </td>
                <th>
                    @if(item.IsParent)
                    {
                        @Html.DisplayFor(modelItem => item.CrossingPoint)
                    }
                </th>
                <td>
                    @if (item.IsParent)
                    {
                        @Html.DisplayFor(modelItem => item.ChildXBin)
                    }
                </td>
                <td>
                    @if (item.IsParent)
                    {
                        @Html.DisplayFor(modelItem => item.ChildXBin)
                    }
                    else if(!item.IsParent && item.IsSurvivor)
                    {
                        @Html.DisplayFor(modelItem => item.XBin)
                    }
                </td>
                <td>
                    @if(item.MutantBits.Count > 0)
                    {
                        @Html.DisplayFor(modelItem => item.MutantBits)
                    }
                </td>
                <td>
                    @if (item.IsSurvivor)
                    {
                        @Html.DisplayFor(modelItem => item.XBinAfterMutation)
                    }
                </td>
                <td>
                    @if (item.IsSurvivor)
                    {
                        @Html.DisplayFor(modelItem => item.XRealAfterMutation)
                    }
                </td>
                <td>
                    @if (item.IsSurvivor)
                    {
                        @Html.DisplayFor(modelItem => item.FunctionValueAfterMutation)
                    }
                </td>

            </tr>
        }
    </tbody>
</table>
<form asp-action="Delete">
    <input type="submit" value="Wyczyść" class="btn btn-danger" />
</form>
